'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Collapse = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactMotion = require('react-motion');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var PRECISION = 0.5;
var NO_ACTION = 'NO_ACTION';
var SHOULD_MEASURE = 'SHOULD_MEASURE';
var SHOULD_OPEN = 'SHOULD_OPEN';
var SHOULD_CLOSE = 'SHOULD_CLOSE';

var stringHeight = function stringHeight(height) {
  return Math.max(0, parseFloat(height)).toFixed(1);
};
var noop = function noop() {
  return null;
};

var Height = _react2.default.createClass({
  displayName: 'Height',

  propTypes: {
    shouldMeasure: _react2.default.PropTypes.bool,
    onMeasure: _react2.default.PropTypes.func.isRequired,
    children: _react2.default.PropTypes.node.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return { shouldMeasure: false };
  },
  componentDidMount: function componentDidMount() {
    this.onMeasure();
  },
  shouldComponentUpdate: function shouldComponentUpdate(nextProps) {
    return !this.props.shouldMeasure && nextProps.shouldMeasure;
  },
  componentDidUpdate: function componentDidUpdate() {
    this.onMeasure();
  },
  onMeasure: function onMeasure() {
    if (this.props.shouldMeasure) {
      this.props.onMeasure({
        width: this.ref.clientWidth,
        height: this.ref.clientHeight
      });
    }
  },
  setRef: function setRef(ref) {
    this.ref = ref;
  },
  render: function render() {
    var _props = this.props;
    var _shouldMeasure = _props.shouldMeasure;
    var _onMeasure = _props.onMeasure;
    var children = _props.children;

    var props = _objectWithoutProperties(_props, ['shouldMeasure', 'onMeasure', 'children']);

    return _react2.default.createElement(
      'div',
      _extends({ ref: this.setRef }, props),
      children
    );
  }
});

exports.default = Height;
var Collapse = exports.Collapse = _react2.default.createClass({
  displayName: 'Collapse',

  propTypes: {
    isOpened: _react2.default.PropTypes.bool.isRequired,
    keepCollapsedContent: _react2.default.PropTypes.bool,
    springConfig: _react2.default.PropTypes.objectOf(_react2.default.PropTypes.number),

    style: _react2.default.PropTypes.object,

    onRest: _react2.default.PropTypes.func,
    onHeightReady: _react2.default.PropTypes.func,

    children: _react2.default.PropTypes.node.isRequired
  },

  getDefaultProps: function getDefaultProps() {
    return {
      keepCollapsedContent: false,
      style: {},
      onRest: noop,
      onHeightReady: noop
    };
  },
  getInitialState: function getInitialState() {
    return { action: NO_ACTION };
  },
  componentWillMount: function componentWillMount() {
    this.height = -1;
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.props.isOpened !== nextProps.isOpened) {
      this.setState({ action: SHOULD_MEASURE });
      return;
    }
    if (!nextProps.isOpened) {
      return;
    }
    if (this.props.style !== nextProps.style || this.props.children !== nextProps.children) {
      this.setState({ action: SHOULD_MEASURE });
    }
  },
  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    return this.state.action !== nextState.action || this.state.height !== nextState.height || this.props.children !== nextProps.children || this.props.style !== nextProps.style || this.props.springConfig !== nextProps.springConfig || this.props.keepCollapsedContent !== nextProps.keepCollapsedContent || this.props.onRest !== nextProps.onRest || this.props.onHeightReady !== nextProps.onHeightReady;
  },
  componentDidUpdate: function componentDidUpdate(_, prevState) {
    if (prevState.action === SHOULD_MEASURE && this.state.action !== SHOULD_MEASURE) {
      this.props.onHeightReady(this.height);
    }
  },
  onMeasure: function onMeasure(_ref) {
    var height = _ref.height;

    console.log('height', height);
    if (this.state.action !== SHOULD_MEASURE) {
      return;
    }
    this.height = height;
    this.setState({ action: this.props.isOpened ? SHOULD_OPEN : SHOULD_CLOSE });
  },


  //  getMotionHeight(height) {
  //    const {isOpened, springConfig} = this.props;
  //    const {isOpenedChanged} = this.state;
  //
  //    const newHeight = isOpenedChanged && !isOpened ? 0 : height;
  //    const newStringHeight = stringHeight(newHeight);
  //
  //    // No need to animate if content is closed and it was closed previously
  //    // Also no need to animate if height did not change
  //    const skipAnimation = !isOpenedChanged && !isOpened || this.height === newStringHeight;
  //
  //    return skipAnimation ? newHeight : spring(newHeight, {
  //      precision: PRECISION,
  //      ...springConfig
  //    });
  //  },


  onRest: function onRest() {
    console.log('rest!');
  },
  render: function render() {
    var _SHOULD_OPEN$SHOULD_C, _SHOULD_OPEN$SHOULD_C2;

    //    if (this.state.action === SHOULD_MEASURE) {
    //    }

    console.log('action', this.state.action, 'height', this.height);

    var content = _react2.default.createElement(
      Height,
      {
        shouldMeasure: this.state.action === SHOULD_MEASURE,
        onMeasure: this.onMeasure },
      this.props.children
    );

    var springConfig = _extends({
      precision: PRECISION
    }, this.props.springConfig);

    var motionStyle = (_SHOULD_OPEN$SHOULD_C = {}, _defineProperty(_SHOULD_OPEN$SHOULD_C, SHOULD_OPEN, this.height < 0 ? {} : { height: (0, _reactMotion.spring)(this.height, springConfig) }), _defineProperty(_SHOULD_OPEN$SHOULD_C, SHOULD_CLOSE, this.height < 0 ? {} : { height: (0, _reactMotion.spring)(this.height, springConfig) }), _defineProperty(_SHOULD_OPEN$SHOULD_C, SHOULD_MEASURE, {}), _defineProperty(_SHOULD_OPEN$SHOULD_C, NO_ACTION, {}), _SHOULD_OPEN$SHOULD_C)[this.state.action];

    var extraStyle = _extends({}, (_SHOULD_OPEN$SHOULD_C2 = {}, _defineProperty(_SHOULD_OPEN$SHOULD_C2, SHOULD_OPEN, { overflow: 'hidden' }), _defineProperty(_SHOULD_OPEN$SHOULD_C2, SHOULD_CLOSE, { overflow: 'hidden' }), _defineProperty(_SHOULD_OPEN$SHOULD_C2, SHOULD_MEASURE, {}), _defineProperty(_SHOULD_OPEN$SHOULD_C2, NO_ACTION, this.props.isOpened ? { height: 'auto' } : { overflow: 'hidden', height: 0 }), _SHOULD_OPEN$SHOULD_C2)[this.state.action], this.props.style);

    console.log('motionStyle', motionStyle);
    return _react2.default.createElement(
      _reactMotion.Motion,
      { onRest: this.onRest, style: motionStyle },
      function (st) {
        return _react2.default.createElement(
          'div',
          { style: _extends({}, extraStyle, st) },
          content
        );
      }
    );
  }
});
//# sourceMappingURL=Collapse1.js.map